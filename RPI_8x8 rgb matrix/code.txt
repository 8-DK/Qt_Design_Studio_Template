/*
  Copyright (c) 2020-2021 Alan Yorinks All rights reserved.

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
  Version 3 as published by the Free Software Foundation; either
  or (at your option) any later version.
  This library is distributed in the hope that it will be useful,f
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE
  along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <NeoPixelConnect.h>
#define MAXIMUM_NUM_NEOPIXELS 64

// Create an instance of NeoPixelConnect and initialize it
// to use GPIO pin 4 (D12) as the control pin, for a string
// of 8 neopixels. Name the instance p
NeoPixelConnect p(4, MAXIMUM_NUM_NEOPIXELS, pio0, 0);

// this array will hold a pixel number and the rgb values for the
// randomly generated pixel values
uint8_t random_pixel_setting[4];

typedef struct clr {
  uint8_t r;
  uint8_t g;
  uint8_t b;
} clr;
static const uint8_t sm1[] PROGMEM  = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0xbf, 
  0x39, 0xec, 0xc4, 0x48, 0xec, 0xc4, 0x47, 0xea, 
  0xc3, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xe9, 0xb9, 0x27, 0xff, 0xd1, 
  0x45, 0xee, 0xc3, 0x3d, 0xef, 0xc4, 0x3d, 0xff, 
  0xd0, 0x41, 0xe9, 0xbe, 0x36, 0x00, 0x00, 0x00, 
  0xea, 0xbf, 0x3a, 0xf5, 0xc8, 0x40, 0x00, 0x00, 
  0x06, 0xff, 0xd7, 0x46, 0xf0, 0xc6, 0x43, 0x00, 
  0x00, 0x06, 0xff, 0xd4, 0x41, 0xea, 0xc3, 0x49, 
  0xee, 0xc4, 0x42, 0xf3, 0xc9, 0x42, 0x00, 0x00, 
  0x07, 0xff, 0xd7, 0x46, 0xf0, 0xc5, 0x43, 0x00, 
  0x00, 0x07, 0xff, 0xd5, 0x44, 0xee, 0xc8, 0x51, 
  0xed, 0xc2, 0x42, 0xf1, 0xc5, 0x3e, 0xff, 0xdf, 
  0x51, 0xf0, 0xc4, 0x3d, 0xf2, 0xc6, 0x3e, 0xff, 
  0xde, 0x50, 0xef, 0xc3, 0x3b, 0xee, 0xc8, 0x52, 
  0xea, 0xbf, 0x39, 0xf2, 0xc7, 0x40, 0x00, 0x00, 
  0x00, 0xff, 0xe6, 0x50, 0xfe, 0xd2, 0x4b, 0x00, 
  0x00, 0x00, 0xff, 0xd4, 0x41, 0xea, 0xc3, 0x49, 
  0x00, 0x00, 0x00, 0xea, 0xba, 0x26, 0xff, 0xd9, 
  0x4a, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0a, 0xff, 
  0xe3, 0x4a, 0xe9, 0xbe, 0x36, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xc0, 
  0x39, 0xff, 0xd5, 0x52, 0xfe, 0xd4, 0x4f, 0xeb, 
  0xc3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t hrt[] PROGMEM  = {
  0x00, 0x00, 0x00, 0xe8, 0x20, 0x33, 0xe5, 0x94, 
  0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xf1, 0x0e, 0x39, 0x00, 0x00, 0x00, 
  0xd0, 0x34, 0x49, 0xec, 0x19, 0x39, 0xd2, 0x2f, 
  0x4b, 0xe5, 0x94, 0x9f, 0x00, 0x00, 0x00, 0xd3, 
  0x32, 0x4b, 0xeb, 0x19, 0x3a, 0xd1, 0x32, 0x4d, 
  0xeb, 0x1c, 0x3b, 0xeb, 0x19, 0x3a, 0xec, 0x1a, 
  0x3a, 0xea, 0x17, 0x38, 0xea, 0x17, 0x38, 0xe8, 
  0x1e, 0x3a, 0xec, 0x1a, 0x3b, 0xeb, 0x19, 0x39, 
  0xec, 0x17, 0x3a, 0xea, 0x1b, 0x3a, 0xeb, 0x19, 
  0x39, 0xeb, 0x19, 0x3a, 0xeb, 0x19, 0x39, 0xeb, 
  0x19, 0x39, 0xec, 0x1a, 0x3a, 0xec, 0x18, 0x39, 
  0xe5, 0x94, 0x9f, 0xf2, 0x11, 0x3f, 0xeb, 0x19, 
  0x3a, 0xea, 0x17, 0x38, 0xeb, 0x19, 0x39, 0xec, 
  0x1a, 0x3a, 0xea, 0x17, 0x38, 0xea, 0x17, 0x38, 
  0x00, 0x00, 0x00, 0xe5, 0x94, 0x9f, 0xe6, 0x1f, 
  0x3d, 0xea, 0x18, 0x38, 0xea, 0x18, 0x38, 0xea, 
  0x17, 0x38, 0xea, 0x17, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x94, 
  0x9f, 0xda, 0x37, 0x48, 0xec, 0x19, 0x39, 0xd5, 
  0x46, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xeb, 0x98, 0xa0, 0xe5, 0x1c, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// select a random pixel number in the string
uint8_t get_pixel_number() {
  return ((uint16_t)random(0, MAXIMUM_NUM_NEOPIXELS - 1));
}

// select a random intensity
uint8_t get_pixel_intensity() {
  return ((uint8_t)random(0, 255));
}

void get_random_pixel_and_color() {
  random_pixel_setting[0] = get_pixel_number();
  random_pixel_setting[1] = get_pixel_intensity();
  random_pixel_setting[2] = get_pixel_intensity();
  random_pixel_setting[3] = get_pixel_intensity();
}

void setup() {
  Serial.begin(115200);
  delay(2000);
  Serial.println("In setup");
  p.neoPixelClear();
}

void loop() {
  
  p.neoPixelClear();
  clr *c = (clr*)&sm1;
  // display the randomly assigned pixel and color
  for (int i = 0 ; i < 64; i++)
  {

    p.neoPixelSetValue( i,
                        c[i].r,
                        c[i].g,
                        c[i].b, false);
  }
  p.neoPixelShow();
  delay(1000);
  p.neoPixelClear();
  c = (clr*)&hrt;
  // display the randomly assigned pixel and color
  for (int i = 0 ; i < 64; i++)
  {

    p.neoPixelSetValue( i,
                        c[i].r,
                        c[i].g,
                        c[i].b, false);
  }
  p.neoPixelShow();
  delay(1000);
}